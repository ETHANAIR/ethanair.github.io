<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ios on Ethan</title>
    <link>http://ethanair.github.io/tags/ios/</link>
    <description>Recent content in Ios on Ethan</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Fri, 13 Apr 2018 19:34:20 +0800</lastBuildDate>
    
	<atom:link href="http://ethanair.github.io/tags/ios/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>你真的会使用UICollectionViewLayout吗？</title>
      <link>http://ethanair.github.io/posts/uicollectionviewlayout/</link>
      <pubDate>Fri, 13 Apr 2018 19:34:20 +0800</pubDate>
      
      <guid>http://ethanair.github.io/posts/uicollectionviewlayout/</guid>
      <description>你真的会使用UICollectionViewLayout吗？ 这阵子接到一个需求，让我对UICollectionView有了新的认识，促使我对</description>
    </item>
    
    <item>
      <title>STATISTICS BUTTONS WHERE USERS CLICKE</title>
      <link>http://ethanair.github.io/posts/statistics/</link>
      <pubDate>Tue, 20 Jun 2017 19:30:08 +0800</pubDate>
      
      <guid>http://ethanair.github.io/posts/statistics/</guid>
      <description>Why? There is a demand when I at an interview. So I write this demo to note this tips.
Get the button&#39;s infomation and current ViewController where the button has been clicked.  How? In my idea 1. Redefine the button&amp;rsquo;s response event with runtime. 2. Create a class to get the current ViewController. 3. Add a function in to the button&amp;rsquo;s response event.
So let&amp;rsquo;s start it!  First we should add a category with UIButton named (UIButton+Counting), then import the runtime with (#import ), and redefine the (+ (void)load).</description>
    </item>
    
    <item>
      <title>Simple demo about the class of CAEmitterLayer</title>
      <link>http://ethanair.github.io/posts/caemitterlayer/</link>
      <pubDate>Wed, 16 Nov 2016 19:13:37 +0800</pubDate>
      
      <guid>http://ethanair.github.io/posts/caemitterlayer/</guid>
      <description>The CAEmitterLayer class provides a particle emitter system for Core Animation. The particles are defined by instances of CAEmitterCell.
You should get some information about CAEmitterLayer from Apple Document before we start it. This class is inherits from CALayer, so we do not import any frameworks when we use it. We will use some properties in this demo like this list:
CAEmitterLayer  emitterPosition - The position of the center of the particle emitter.</description>
    </item>
    
  </channel>
</rss>